//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub name: String,
  pub email: String,
  pub avatar_url: String,
  pub password_hash: Option<String>,
  pub created_at: DateTimeWithTimeZone,
  pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_one = "super::login_token::Entity")]
  LoginToken,
  #[sea_orm(has_many = "super::oauth_account::Entity")]
  OauthAccount,
  #[sea_orm(has_many = "super::user_permission::Entity")]
  UserPermission,
}

impl Related<super::login_token::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::LoginToken.def()
  }
}

impl Related<super::oauth_account::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::OauthAccount.def()
  }
}

impl Related<super::user_permission::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserPermission.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
